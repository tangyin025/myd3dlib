
#include "CommonHeader.hlsl"
float g_bias=0.2;
float g_intensity=5;
float g_sample_rad=100;
float g_scale=10;
float4x4 g_Proj;
texture g_OcclusionRT;

sampler OcclusionRTSampler = sampler_state
{
	Texture = <g_OcclusionRT>;
	MipFilter = NONE;
	MinFilter = POINT;
	MagFilter = POINT;
    ADDRESSU = CLAMP;
    ADDRESSV = CLAMP;
};

float3 ssaoKernel[64]=
{
	{0.0090909926220775, -0.076824769377708, 0.063366465270519},
	{0.08439527451992, -0.051909696310759, 0.015060432255268},
	{0.0024168021045625, 0.015470811165869, 0.099656246602535},
	{-0.015990931540728, 0.10068782418966, 0.0023816919419914},
	{-0.064422592520714, -0.079040057957172, 0.017829326912761},
	{-0.051477644592524, -0.091584056615829, 0.009550946764648},
	{-0.031284771859646, 0.1029734313488, 0.0078954892233014},
	{-0.092853367328644, -0.011302435770631, 0.059327460825443},
	{0.048599194735289, -0.092680387198925, 0.045373108237982},
	{-0.051177099347115, 0.061742145568132, 0.086285255849361},
	{0.026179296895862, 0.11907996237278, 0.0034548174589872},
	{0.060328051447868, 0.013356658630073, 0.11048245429993},
	{-0.095308810472488, -0.038654144853354, 0.082166567444801},
	{0.026764418929815, -0.10978987067938, 0.077688656747341},
	{0.090459123253822, 0.040569804608822, 0.1031466498971},
	{-0.071700289845467, -0.10930643230677, 0.072408743202686},
	{0.014853253029287, 0.085716724395752, 0.12979248166084},
	{0.13191303610802, -0.080433033406734, 0.053498100489378},
	{-0.091698683798313, 0.12963342666626, 0.063976734876633},
	{0.080244682729244, 0.16032023727894, 0.0037867159117013},
	{0.13083815574646, -0.098207257688046, 0.092409960925579},
	{-0.057618550956249, 0.1328651458025, 0.13340291380882},
	{0.17539124190807, -0.051239501684904, 0.095873728394508},
	{-0.035135667771101, -0.19027933478355, 0.096524521708488},
	{0.08107652515173, 0.15175057947636, 0.14740735292435},
	{0.19894483685493, -0.12895782291889, 0.010767458938062},
	{-0.17593808472157, -0.11789084225893, 0.13006637990475},
	{0.042912524193525, -0.021233877167106, 0.25573739409447},
	{-0.21355746686459, 0.10144957154989, 0.13501761853695},
	{-0.19053454697132, -0.027177905663848, 0.20991262793541},
	{0.21805195510387, 0.098393127322197, 0.17728373408318},
	{0.19541890919209, -0.11402251571417, 0.2136097997427},
	{-0.21112634241581, -0.11969770491123, 0.21615535020828},
	{-0.22458033263683, -0.15574169158936, 0.20104876160622},
	{-0.1798399835825, -0.26271280646324, 0.15478476881981},
	{0.19743803143501, -0.23896420001984, 0.20049229264259},
	{-0.033291820436716, -0.10972472280264, 0.36728286743164},
	{-0.15381461381912, 0.23205976188183, 0.28833052515984},
	{0.24127961695194, -0.041722528636456, 0.33789095282555},
	{0.33911910653114, 0.20804975926876, 0.1739157885313},
	{-0.11513362824917, 0.31314477324486, 0.30429142713547},
	{-0.01599913276732, -0.23927010595798, 0.40347608923912},
	{0.095479153096676, 0.4277617931366, 0.2136704325676},
	{0.118223503232, -0.30017787218094, 0.39016687870026},
	{-0.46439296007156, -0.20942631363869, 0.12851104140282},
	{0.28601559996605, 0.43933469057083, 0.14881730079651},
	{-0.23448093235493, -0.41669210791588, 0.30090719461441},
	{-0.067579448223114, 0.57929980754852, 0.050097443163395},
	{0.41580399870872, 0.010349757038057, 0.44106569886208},
	{0.59438621997833, 0.13744375109673, 0.1471399217844},
	{-0.46219688653946, 0.4544076025486, 0.0387247428298},
	{-0.38874930143356, -0.5255274772644, 0.15368458628654},
	{-0.40048757195473, 0.56402623653412, 0.057578362524509},
	{0.24580900371075, -0.47299563884735, 0.4798396229744},
	{0.098986372351646, -0.71304327249527, 0.17447355389595},
	{-0.45384684205055, 0.49561613798141, 0.36484557390213},
	{0.38972666859627, -0.36572843790054, 0.58049595355988},
	{-0.31079456210136, 0.46542021632195, 0.59094023704529},
	{-0.37706497311592, -0.12020371854305, 0.73997473716736},
	{0.50586766004562, 0.53657633066177, 0.45186349749565},
	{0.40002292394638, 0.67361867427826, 0.42441546916962},
	{0.56539505720139, 0.64345037937164, 0.32908129692078},
	{0.46872600913048, 0.52232283353806, 0.63229620456696},
	{0.55463445186615, 0.57908421754837, 0.54955464601517}
};

float3 ssaoNoise[16]=
{
	{0.26733112335205, -0.43318524956703, 0.0},
	{-0.26811882853508, 0.76381689310074, 0.0},
	{0.10568914562464, 0.090765230357647, 0.0},
	{-0.60723882913589, 0.65604424476624, 0.0},
	{-0.61585539579391, -0.53261595964432, 0.0},
	{0.45133924484253, -0.59424471855164, 0.0},
	{0.56987339258194, 0.91667246818542, 0.0},
	{0.9441967010498, 0.53230553865433, 0.0},
	{0.70194286108017, -0.62349832057953, 0.0},
	{0.08718866109848, -0.061237376183271, 0.0},
	{-0.82041823863983, 0.0050604329444468, 0.0},
	{-0.022253500297666, -0.65527421236038, 0.0},
	{0.85587269067764, -0.40318629145622, 0.0},
	{0.57523638010025, -0.46238535642624, 0.0},
	{-0.029811553657055, 0.7737962603569, 0.0},
	{-0.089441284537315, 0.0065105808898807, 0.0}
};

struct VS_OUTPUT
{
    float4 Position   : POSITION;   // vertex position 
    float2 TextureUV  : TEXCOORD0;  // vertex texture coords 
};

float4 OcclusionPS(VS_OUTPUT In) : COLOR0
{
	// https://learnopengl.com/Advanced-Lighting/SSAO
	float3 fragPos = tex2D(PositionRTSampler, In.TextureUV).xyz;
	float3 normal = tex2D(NormalRTSampler, In.TextureUV).xyz;
	float3 randomVec = ssaoNoise[In.TextureUV.y * g_ScreenDim.y % 4 * 4 + In.TextureUV.x * g_ScreenDim.x % 4];

	float3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
	float3 bitangent = cross(normal, tangent);
	float3x3 TBN = float3x3(tangent, bitangent, normal);

	float occlusion = 0;
	for (int i = 0; i < 64; i++)
	{
		float3 sample = mul(ssaoKernel[i], TBN);
		sample = fragPos + sample * g_sample_rad;
		float4 offset = float4(sample, 1);
		offset = mul(offset, g_Proj);
		offset.xyz /= offset.w;
		offset.xyz = offset.xyz * 0.5 + 0.5;
		offset.y = 1 - offset.y;

		float sampleDepth = tex2D(PositionRTSampler, offset.xy).z;
		float rangeCheck = smoothstep(0.0, 1.0, g_sample_rad / abs(fragPos.z - sampleDepth));
		occlusion += (sampleDepth >= sample.z + 0.01 ? 1.0 : 0.0) * rangeCheck;
	}
	return float4(1.0 - occlusion / 64, 0, 0, 0);
}

float4 AmbientPS(VS_OUTPUT In) : COLOR0
{
	// return float4(g_AmbientColor.xyz * tex2D(OcclusionRTSampler, In.TextureUV).xyz, 0);

	float2 texelSize = 1.0 / g_ScreenDim;
    float result = 0.0;
    for (int x = -2; x < 2; ++x) 
    {
        for (int y = -2; y < 2; ++y) 
        {
			float2 offset = float2(x, y) * texelSize;
			result += tex2D(OcclusionRTSampler, offset + In.TextureUV).r;
        }
    }
	return float4(g_AmbientColor.xyz * result / (4.0 * 4.0), 0);
}

technique RenderScene
{
    pass P0
    {
		VertexShader = null;
		PixelShader = compile ps_3_0 OcclusionPS();
	}
    pass P1
    {
		VertexShader = null;
		PixelShader = compile ps_3_0 AmbientPS();
	}
}
